# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Full test suite

on:
  pull_request_review:
    types: [ submitted ]

jobs:
  change-info:
    name: Check previous checks
    runs-on: ubuntu-latest
    if: >-
      github.event.review.state == 'approved'
      || github.event.review.body == 'recheck'
      || github.event.review.body == 'recheck-snap'
      || github.event.review.body == 'recheck-full'
    outputs:
      skip-func-tests: ${{ steps.skip-func-tests.outputs.skip }}
      skip-tests: ${{ steps.skip-tests.outputs.skip }}
    steps:
      - uses: actions/checkout@v3
      - name: Get latest workflow info
        id: latest-workflow
        env:
          CURRENT_BRANCH: ${{ github.event.pull_request.head.ref }}
        run: |
          function get_last_workflow() {
            # get all previus workflows for "test_full.yml" file and current branch
            _workflows=$(curl -H "Accept: application/vnd.github.v3+json" "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/workflows/tests_full.yml/runs?branch=$CURRENT_BRANCH")
            # clear unsupported characters
            _workflows_safe=$(echo "$_workflows" | tr "\r" " " | tr "\n" " " | tr "\t" " ")
            # select previous (current is with index 0) workflow
            _last_workflow=$(echo "$_workflows_safe" | jq -c '.workflow_runs[1]')

            echo "$_last_workflow"
          }

          # get last workflow
          workflow=$(get_last_workflow)

          # wait (max is 60min) if the last workflow is still running
          max_time=$((SECONDS+60*60))
          while [[ "$workflow" != "null" && "$(echo $workflow | jq -r '.status')" != "completed" && $SECONDS -lt $max_time ]];
          do
            workflow=$(get_last_workflow)
            echo "Waiting for workflow + $(echo $workflow | jq -r '.id')"
            sleep 20
          done

          # define an empty value if the workflow is not found
          if [[ -z "$workflow" ]]; then
            workflow='{"head_sha": "", "status": "", "conclusion": ""}'
          fi

          echo "::set-output name=workflow::$workflow"
      - name: Check to see if there is any new commit
        id: new-commit
        env:
          LATEST_HEAD_SHA: ${{ fromJson(steps.latest-workflow.outputs.workflow).head_sha }}
          CURRENT_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          if [ "$LATEST_HEAD_SHA" != "$CURRENT_SHA" ]
          then
            echo "::set-output name=new::1"
            echo "There's a new commit."
          else
            echo "::set-output name=new::0"
            echo "There is no new commit."
          fi
      - name: Track changed files in the PR for functional tests
        id: skip-func-tests
        run: |
          git remote add upstream $GITHUB_SERVER_URL/$GITHUB_REPOSITORY
          git fetch upstream master

          changed=0
          git diff --name-only upstream/master | grep -qE '^(juju_verify/|tests/functional/)' || changed=1
          echo "::set-output name=skip::$changed"
          if [ $changed == 0 ]
          then
            echo "The code base or function test code has changed."
          else
            echo "No changes were found."
          fi
      - name: Skip tests
        id: skip-tests
        env:
          WORKFLOW_STATUS: ${{ fromJson(steps.latest-workflow.outputs.workflow).status }}
          WORKFLOW_CONCLUSION: ${{ fromJson(steps.latest-workflow.outputs.workflow).conclusion }}
          NEW_COMMIT: ${{ steps.new-commit.outputs.new }}
        run: |
          if [[ $WORKFLOW_STATUS == 'completed' && $WORKFLOW_CONCLUSION == 'success' && $NEW_COMMIT == 0 ]]; then
            echo "Lint, Unit tests, Docs and Build will be skipped"
            echo "::set-output name=skip::1"
          else
            echo "Lint, Unit tests, Docs and Build will be run"
            echo "::set-output name=skip::0"
          fi

  lint-unittests-docs-build:
    name: Lint, Unit tests, Docs and Build
    runs-on: ubuntu-latest
    needs: change-info
    if: >-
      needs.change-info.outputs.skip-tests == 0
      || github.event.review.body == 'recheck'
      || github.event.review.body == 'recheck-snap'
      || github.event.review.body == 'recheck-full'
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.6", "3.7", "3.8", "3.9", "3.10"]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox
      - name: Run lint checkers
        run: tox -e lint
      - name: Run unit tests
        run: tox -e unit
      - name: Build docs
        run: tox -e docs
      - name: Build package
        run: tox -e build
      - name: Verify package
        run: tox -e build-verify

  build-snap:
    name: Build snap
    runs-on: ubuntu-latest
    needs: lint-unittests-docs-build
    if: >-
      needs.change-info.outputs.skip-func-tests == 0
      || github.event.review.body == 'recheck-snap'
      || github.event.review.body == 'recheck-full'
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: snapcore/action-build@v1
      id: snapcraft
    - name: Install snap
      run: sudo snap install --dangerous ${{ steps.snapcraft.outputs.snap }}

  func-tests:
    name: Integration tests
    runs-on: self-hosted
    needs: build-snap
    if: >-
      needs.change-info.outputs.skip-func-tests == 0
      || github.event.review.body == 'recheck-full'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Run func tests
        run: tox -e func
